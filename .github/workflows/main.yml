name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Build with Maven
        run: mvn clean install -DskipTests  
        
  sonar:
    runs-on: ubuntu-latest
    needs: build
    steps:
      
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      - name: Build with Maven
        run: mvn clean install -DskipTests      
      
      - name: SonarQube Analysis
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_KEY }}
  
  test:
    runs-on: ubuntu-latest
    needs: sonar

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Run Spring Tests
      run: mvn test

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: target/surefire-reports/
            
  docker_build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:latest .
      
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:latest
  
  integration:
    runs-on: ubuntu-latest
    needs: docker_build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start services using Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Wait for services to be ready
        run: |
          until curl --silent --fail http://localhost:8080/api/ping; do
            echo "Waiting for the app to be ready..."
            sleep 5
          done

      - name: Run E2E Tests using Postman (Newman)
        run: |
          newman run ./tests/integration.json 

      - name: Tear down Docker Compose services
        run: docker-compose down

  deploy_prod:
    runs-on: ubuntu-latest
    needs: integration

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_NAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{secrets.SSH_PORT}}
          script: |
            cd ${{ secrets.PATH }}
            docker compose pull
            docker compose up -d

  e2e_tests:
    runs-on: ubuntu-latest
    needs: deploy_prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Newman
        run: npm install -g newman

      - name: Run E2E tests with Postman
        run: newman run ./tests/testCollection.json

